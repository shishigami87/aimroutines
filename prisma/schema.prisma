// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isModerator Boolean @default(false)

    submittedRoutines Routine[] @relation(name: "RoutineSubmittedBy")

    likedRoutines       RoutineLiked[]
    benchmarkedRoutines RoutineBenchmark[]
    likedResources      ResourceLiked[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// -------------

model Routine {
    id String @id @default(cuid())

    title            String  @unique
    description      String?
    author           String?
    authorHandle     String?
    externalResource String?
    isBenchmark      Boolean @default(false)
    game             Game

    playlist Playlist[]

    submittedBy   User   @relation(name: "RoutineSubmittedBy", fields: [submittedById], references: [id])
    submittedById String

    likedByUsers       RoutineLiked[]
    benchmarkedByUsers RoutineBenchmark[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RoutineLiked {
    routine   Routine @relation(fields: [routineId], references: [id])
    routineId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    likedAt   DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([routineId, userId])
}

model RoutineBenchmark {
    url String

    routine   Routine @relation(fields: [routineId], references: [id])
    routineId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([routineId, userId])
}

model Playlist {
    title String @default("Normal")

    reference String @unique

    routine   Routine @relation(fields: [routineId], references: [id])
    routineId String

    @@id([title, routineId])
}

enum Game {
    KOVAAKS
    AIMLABS
}

enum ResourceType {
    CROSSHAIR
    THEME
    SOUND
}

model Resource {
    hash String       @id
    url  String
    type ResourceType

    likedByUsers ResourceLiked[]

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    ResourceLikedTwitch ResourceLikedTwitch[]
}

model ResourceLiked {
    resource     Resource @relation(fields: [resourceHash], references: [hash])
    resourceHash String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    likedAt   DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([resourceHash, userId])
}

model ResourceLikedTwitch {
    resource     Resource @relation(fields: [resourceHash], references: [hash])
    resourceHash String

    userId String

    likedAt   DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([resourceHash, userId])
}
